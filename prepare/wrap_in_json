#!/usr/bin/env python3
"""
This script is a wrapper around standard JSON-unaware UNIX scripts. Its purpose is to
take JSON as input, extract a field, pass it to an underlying UNIX script, and then take
the output and add it to the JSON object which is then passed to STDOUT. It takes:

- an input JSON field name
- an output JSON field name
- a command to run

Each input line will be parsed as a JSON object, and the requested input field extracted.
This is then run through the subcommand.
The input JSON object is then augmented with the requested output field, whose value is the
output of the command.

You can also pass in plain text if you add the `-f` option. In this case, the plain text will
be treated as if it were a JSON object with the plain text in the args.input_field name.

Author: Matt Post
"""

import json
import os
import sys
import argparse
import subprocess

def main(args):
    # sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 0)
    # sys.stdin = os.fdopen(sys.stdin.fileno(), 'r', 0)

    process = subprocess.Popen(args.command.split(),
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)

    for lineno, line in enumerate(sys.stdin, 1):
        try:
            jobj = json.loads(line)
        except ValueError:
            if args.force:
                jobj = { args.input_field: line.rstrip() }
            else:
                print('[{}] JSON parsing of input failed, creating object with field "{}"'.format(lineno, args.input_field), file=sys.stderr)
                print('     If you want to magically turn it into JSON, rerun with `--force` (or `-f`)', file=sys.stderr)
                raise

        arg = jobj[args.input_field] + '\n'
        process.stdin.write(arg.encode('utf-8'))
        process.stdin.flush()
        jobj[args.output_field] = process.stdout.readline().result.decode('utf-8')

        print(json.dumps(jobj), flush=True)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='JSON wrapper')
    parser.add_argument('input_field', type=str, help='The JSON input field to pass through the command.')
    parser.add_argument('output_field', type=str, help='The JSON output field to append to the object.')
    parser.add_argument('command', type=str, help='The command to run.')
    parser.add_argument('--force', '-f', action='store_true', help='Force input to JSON if it is plain text.')

    args = parser.parse_args()
    main(args)
